MISRA C++ 2008 Rule 0.1.6
A project shall not contain instances of non-volatile variables being
given values that are never subsequently used.

## state machine model ##

This rule can be checked using a state machine:

(D for defined, R for referenced)

```
{}   ----`define v;`-----> {v:D}
{v:D} ---`reference v;`--> {v:R}
{v:D} ---`undefine v;` --> {}, error: a recently defined
                                      variable is undefined
{v:R} ---`undefine v;` --> {}
```

Error "a recently Defined variable is Undefined" is also know as DU.

This state machine runs on different paths on the dataflow.

## side effect in initializer ##

@xjia proposed that this rule restricts too much, because `define v`
may introduce side effects and be useful even though `v` is not
referenced.

This rule implicitly assumes initializers have no side effects. This
assumption holds in critical systems and many standards, such as

C17 N2310 6.7.9(2), C11 N1570 6.7.9(2), C99 N1256 6.7.8(2)

> No initializer shall attempt to provide a value for an object not
contained within the entity being initialized

I didn't find C++ specification sentences about this. But, violation
of this rule is likely to be a wrong choice.

## Naive Implementation

Define: function declaration, unary increment/decrement operator, binary assigment operator.
Undefine: end of function.
Use: variable reference.

Run command like

```
bazel run @llvm-project//clang -- --analyze --analyzer-no-default-checks --analyzer-output sarif -o out path/to/bad1.cc -Xanalyzer -analyzer-checker=misra_cxx_2008.DUDataflow
```
