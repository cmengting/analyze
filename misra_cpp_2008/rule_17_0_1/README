MISRA C++ 2008 Rule 17-0-1
Reserved identifiers, macros and functions in the standard library
shall not be defined, redefined or undefined.

Refer to C++ 2003 17.4.3.1 Reserved names [lib.reserved.names].

It is undefined for a C++ program to add declarations or definitions to namespace `std` or namespaces within namespace `std` unless otherwise specified.

1. Macro Names

Macro names: A translation unit that includes a header shall not contain any macros that define names declared or defined in that header.
Nor shall such a translation unit define macros for names lexically identical to keywords.

2. Global Names

Each name that contains a double underscore (_ _) or begins with an underscore followed by an upper-case letter is reserved to the implementation for any use.
Each name that begins with an underscore is reserved to the implementation for use as a name in the global namespace.

3. Names with External Linkage

Each name declared as an object with external linkage in a header is reserved to the implementation to designate that library object with external linkage, both in namespace std and in the global namespace.

Each global function signature declared with external linkage in a header is reserved to the implementation to designate that function signature with external linkage.

We pick following reserved names:

Macros:
assert HUGE_VAL NULL SIGILL va_arg
BUFSIZ LC_ALL SIGINT va_end
CLOCKS_PER_SEC LC_COLLATE SIGSEGV va_start
EDOM LC_CTYPE offsetof SIGTERM WCHAR_MAX
EOF LC_MONETARY RAND_MAX SIG_DFL WCHAR_MIN
ERANGE LC_NUMERIC SEEK_CUR SIG_ERR WEOF
errno LC_TIME SEEK_END SIG_IGN
EXIT_FAILURE L_tmpnam SEEK_SET stderr _IOFBF
EXIT_SUCCESS MB_CUR_MAX setjmp stdin _IOLBF
FILENAME_MAX SIGABRT stdout _IONBF
FOPEN_MAX SIGFPE TMP_MAX INT_MAX INT_MIN
sort

Objects:
CHAR_BIT FLT_DIG INT_MIN MB_LEN_MAX
CHAR_MAX FLT_EPSILON LDBL_DIG SCHAR_MAX
CHAR_MIN FLT_MANT_DIG LDBL_EPSILON SCHAR_MIN
DBL_DIG FLT_MAX LDBL_MANT_DIG SHRT_MAX
DBL_EPSILON FLT_MAX_10_EXP LDBL_MAX SHRT_MIN
DBL_MANT_DIG FLT_MAX_EXP LDBL_MAX_10_EXP UCHAR_MAX
DBL_MAX FLT_MIN LDBL_MAX_EXP UINT_MAX
DBL_MAX_10_EXP FLT_MIN_10_EXP LDBL_MIN ULONG_MAX
DBL_MAX_EXP FLT_MIN_EXP LDBL_MIN_10_EXP USHRT_MAX
DBL_MIN FLT_RADIX LDBL_MIN_EXP
DBL_MIN_10_EXP FLT_ROUNDS LONG_MAX
DBL_MIN_EXP INT_MAX LONG_MIN

Functions:
abort fmod isupper mktime strftime wcrtomb
abs fopen iswalnum modf strlen wcscat
acos fprintf iswalpha perror strncat wcschr
asctime fputc iswcntrl pow strncmp wcscmp
asin fputs iswctype printf strncpy wcscoll
atan fputwc iswdigit putc strpbrk wcscpy
atan2 fputws iswgraph putchar strrchr wcscspn
atexit fread iswlower puts strspn wcsftime
atof free iswprint putwc strstr wcslen
atoi freopen iswpunct putwchar strtod wcsncat
atol frexp iswspace qsort strtok wcsncmp
bsearch fscanf iswupper raise strtol wcsncpy
btowc fseek iswxdigit rand strtoul wcspbrk
calloc fsetpos isxdigit realloc strxfrm wcsrchr
ceil ftell labs remove swprintf wcsrtombs
clearerr fwide ldexp rename swscanf wcsspn
clock fwprintf ldiv rewind system wcsstr
cos fwrite localeconv scanf tan wcstod
cosh fwscanf localtime setbuf tanh wcstok
ctime getc log setlocale time wcstol
difftime getchar log10 setvbuf tmpfile wcstombs
div getenv longjmp signal tmpnam wcstoul
exit gets malloc sin tolower wcsxfrm
exp getwc mblen sinh toupper wctob
fabs getwchar mbrlen sprintf towctrans wctomb
fclose gmtime mbrtowc sqrt towlower wctrans
feof isalnum mbsinit srand towupper wctype
ferror isalpha mbsrtowcs sscanf ungetc wmemchr
fflush iscntrl mbstowcs strcat ungetwc wmemcmp
fgetc isdigit mbtowc strchr vfprintf wmemcpy
fgetpos isgraph memchr strcmp vfwprintf wmemmove
fgets islower memcmp strcoll vprintf wmemset
fgetwc isprint memcpy strcpy vsprintf wprintf
fgetws ispunct memmove strcspn vswprintf wscanf
floor isspace memset strerror vwprintf

Keywords:
new delete and not or xor bitand bitor compl and_eq
not_eq or_eq xor_eq false true template typename
dynamic_cast static_cast reinterpret_cast const_cast
typeid sizeof case default if else switch while do
for break continue return goto friend typedef auto
register static extern mutable inline virtual explicit
char wchar_t bool short int long signed unsigned float
double void enum namespace using asm extern const
volatile class struct union private protected public
operator try catch throw

and preprocessing keywords:
ifdef ifndef elif endif include define undef pragma

note: `#line` and `#error` are preprocessing directives, but we don't take `line` and `error` as keywords.

Additionally, this rule takes following predefined macro names as reserved names:
__LINE__ __FILE__ __DATE__ __TIME__ __STDC__ __cplusplus __func__ __STDCPP_DEFAULT_NEW_ALIGNMENT__
__STDCPP_足BFLOAT16_足T__ __STDCPP_足FLOAT16_足T__ __STDCPP_FLOAT32_T__ __STDCPP_FLOAT64_T__
__STDCPP_FLOAT128_T__ __STDC__ __STDC_VERSION__ __STDC_ISO_10646__ __STDC_MB_MIGHT_NEQ_WC__
__STDCPP_THREADS__ __STDCPP_STRICT_POINTER_SAFETY__

There are also other limits in C++2003, which are not considered in this rule.
