//
//Copyright 2022 Naive Systems Ltd.
//
//This software contains information and intellectual property that is
//confidential and proprietary to Naive Systems Ltd. and its affiliates.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: config/config.proto

package configpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Use this key to communicate with redmine
	SupportUserApiKey string `protobuf:"bytes,1,opt,name=support_user_api_key,json=supportUserApiKey,proto3" json:"support_user_api_key,omitempty"`
	// The absolute path of a working directory for scanner.
	ScannerWorkingDirectory string `protobuf:"bytes,3,opt,name=scanner_working_directory,json=scannerWorkingDirectory,proto3" json:"scanner_working_directory,omitempty"`
	// The absolute path of a directory where the managed git repository will
	// be cloned.
	LocalMirrorPath string `protobuf:"bytes,4,opt,name=local_mirror_path,json=localMirrorPath,proto3" json:"local_mirror_path,omitempty"`
	// The absolute path of a working directory for issuepolicy.
	IssuePolicyWorkingDirectory string `protobuf:"bytes,5,opt,name=issue_policy_working_directory,json=issuePolicyWorkingDirectory,proto3" json:"issue_policy_working_directory,omitempty"`
	// The name of image to generate new containers.
	ImageName string `protobuf:"bytes,6,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	// The absolute path of a directory to store analysis results.
	LogDirectory string `protobuf:"bytes,7,opt,name=log_directory,json=logDirectory,proto3" json:"log_directory,omitempty"`
	// Absolute path to git executable.
	GitBinPath string `protobuf:"bytes,14,opt,name=git_bin_path,json=gitBinPath,proto3" json:"git_bin_path,omitempty"`
	// Allowed prefixes of git references.
	AllowedRefPrefixes []string `protobuf:"bytes,15,rep,name=allowed_ref_prefixes,json=allowedRefPrefixes,proto3" json:"allowed_ref_prefixes,omitempty"`
	// Intervals of workers.
	WorkerSleepIntervalInSeconds int32 `protobuf:"varint,17,opt,name=worker_sleep_interval_in_seconds,json=workerSleepIntervalInSeconds,proto3" json:"worker_sleep_interval_in_seconds,omitempty"`
	// The relative path of the file to store rules in a project.
	CheckRulesPath string `protobuf:"bytes,18,opt,name=check_rules_path,json=checkRulesPath,proto3" json:"check_rules_path,omitempty"`
	// Absolute path of podman executable.
	PodmanBinPath string `protobuf:"bytes,19,opt,name=podman_bin_path,json=podmanBinPath,proto3" json:"podman_bin_path,omitempty"`
	// the base url of a rule doc
	// Redmine configuration
	Redmine    *RedmineConfiguration `protobuf:"bytes,20,opt,name=redmine,proto3,oneof" json:"redmine,omitempty"`
	DocSiteUrl string                `protobuf:"bytes,21,opt,name=doc_site_url,json=docSiteUrl,proto3" json:"doc_site_url,omitempty"`
	// The page size to get issues from redmine.
	GetIssuesPageSize uint32 `protobuf:"varint,25,opt,name=get_issues_page_size,json=getIssuesPageSize,proto3" json:"get_issues_page_size,omitempty"`
	// The fingerprints of common websites.
	CommonFingerprints []string `protobuf:"bytes,26,rep,name=common_fingerprints,json=commonFingerprints,proto3" json:"common_fingerprints,omitempty"`
	// The usrls to load local podman images
	PodmanLoadUrls []string `protobuf:"bytes,27,rep,name=podman_load_urls,json=podmanLoadUrls,proto3" json:"podman_load_urls,omitempty"`
	// The project types this worker can handle
	AllowedProjectTypes []string `protobuf:"bytes,28,rep,name=allowed_project_types,json=allowedProjectTypes,proto3" json:"allowed_project_types,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *Configuration) GetSupportUserApiKey() string {
	if x != nil {
		return x.SupportUserApiKey
	}
	return ""
}

func (x *Configuration) GetScannerWorkingDirectory() string {
	if x != nil {
		return x.ScannerWorkingDirectory
	}
	return ""
}

func (x *Configuration) GetLocalMirrorPath() string {
	if x != nil {
		return x.LocalMirrorPath
	}
	return ""
}

func (x *Configuration) GetIssuePolicyWorkingDirectory() string {
	if x != nil {
		return x.IssuePolicyWorkingDirectory
	}
	return ""
}

func (x *Configuration) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *Configuration) GetLogDirectory() string {
	if x != nil {
		return x.LogDirectory
	}
	return ""
}

func (x *Configuration) GetGitBinPath() string {
	if x != nil {
		return x.GitBinPath
	}
	return ""
}

func (x *Configuration) GetAllowedRefPrefixes() []string {
	if x != nil {
		return x.AllowedRefPrefixes
	}
	return nil
}

func (x *Configuration) GetWorkerSleepIntervalInSeconds() int32 {
	if x != nil {
		return x.WorkerSleepIntervalInSeconds
	}
	return 0
}

func (x *Configuration) GetCheckRulesPath() string {
	if x != nil {
		return x.CheckRulesPath
	}
	return ""
}

func (x *Configuration) GetPodmanBinPath() string {
	if x != nil {
		return x.PodmanBinPath
	}
	return ""
}

func (x *Configuration) GetRedmine() *RedmineConfiguration {
	if x != nil {
		return x.Redmine
	}
	return nil
}

func (x *Configuration) GetDocSiteUrl() string {
	if x != nil {
		return x.DocSiteUrl
	}
	return ""
}

func (x *Configuration) GetGetIssuesPageSize() uint32 {
	if x != nil {
		return x.GetIssuesPageSize
	}
	return 0
}

func (x *Configuration) GetCommonFingerprints() []string {
	if x != nil {
		return x.CommonFingerprints
	}
	return nil
}

func (x *Configuration) GetPodmanLoadUrls() []string {
	if x != nil {
		return x.PodmanLoadUrls
	}
	return nil
}

func (x *Configuration) GetAllowedProjectTypes() []string {
	if x != nil {
		return x.AllowedProjectTypes
	}
	return nil
}

type RedmineConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REST API key to use redmine API.
	RestApiKey string `protobuf:"bytes,1,opt,name=rest_api_key,json=restApiKey,proto3" json:"rest_api_key,omitempty"`
	// Root URL for redmine project.
	RedmineUrl string `protobuf:"bytes,2,opt,name=redmine_url,json=redmineUrl,proto3" json:"redmine_url,omitempty"`
	// System key to visit path /sys.
	RestApiSystemKey string `protobuf:"bytes,5,opt,name=rest_api_system_key,json=restApiSystemKey,proto3" json:"rest_api_system_key,omitempty"`
	// Redmine issues status ID
	Status *Status `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// Redmine tracker ID
	Tracker *Tracker `protobuf:"bytes,11,opt,name=tracker,proto3" json:"tracker,omitempty"`
	// Redmine custom field ID
	CustomField *CustomField `protobuf:"bytes,12,opt,name=custom_field,json=customField,proto3" json:"custom_field,omitempty"`
	// Redmine priority ID
	Priority *Priority `protobuf:"bytes,13,opt,name=priority,proto3" json:"priority,omitempty"`
	// Redmine customized query to select uninitialized projects.
	// Such query is created on redmine web GUI.
	UninitProjsCustomQueryId int32           `protobuf:"varint,16,opt,name=uninit_projs_custom_query_id,json=uninitProjsCustomQueryId,proto3" json:"uninit_projs_custom_query_id,omitempty"`
	RoleIds                  *RedmineRoleIDs `protobuf:"bytes,17,opt,name=role_ids,json=roleIds,proto3" json:"role_ids,omitempty"`
}

func (x *RedmineConfiguration) Reset() {
	*x = RedmineConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedmineConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedmineConfiguration) ProtoMessage() {}

func (x *RedmineConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedmineConfiguration.ProtoReflect.Descriptor instead.
func (*RedmineConfiguration) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{1}
}

func (x *RedmineConfiguration) GetRestApiKey() string {
	if x != nil {
		return x.RestApiKey
	}
	return ""
}

func (x *RedmineConfiguration) GetRedmineUrl() string {
	if x != nil {
		return x.RedmineUrl
	}
	return ""
}

func (x *RedmineConfiguration) GetRestApiSystemKey() string {
	if x != nil {
		return x.RestApiSystemKey
	}
	return ""
}

func (x *RedmineConfiguration) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RedmineConfiguration) GetTracker() *Tracker {
	if x != nil {
		return x.Tracker
	}
	return nil
}

func (x *RedmineConfiguration) GetCustomField() *CustomField {
	if x != nil {
		return x.CustomField
	}
	return nil
}

func (x *RedmineConfiguration) GetPriority() *Priority {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *RedmineConfiguration) GetUninitProjsCustomQueryId() int32 {
	if x != nil {
		return x.UninitProjsCustomQueryId
	}
	return 0
}

func (x *RedmineConfiguration) GetRoleIds() *RedmineRoleIDs {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

// Redmine issue status ID
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of new status.
	New int32 `protobuf:"varint,1,opt,name=new,proto3" json:"new,omitempty"`
	// ID of running status.
	Running int32 `protobuf:"varint,2,opt,name=running,proto3" json:"running,omitempty"`
	// ID of resolved status.
	Resolved int32 `protobuf:"varint,3,opt,name=resolved,proto3" json:"resolved,omitempty"`
	// ID of replied status.
	Replied int32 `protobuf:"varint,4,opt,name=replied,proto3" json:"replied,omitempty"`
	// ID of error status.
	Error int32 `protobuf:"varint,5,opt,name=error,proto3" json:"error,omitempty"`
	// ID of false positive status.
	FalsePositive int32 `protobuf:"varint,7,opt,name=false_positive,json=falsePositive,proto3" json:"false_positive,omitempty"`
	// ID of duplicate status.
	Duplicate int32 `protobuf:"varint,8,opt,name=duplicate,proto3" json:"duplicate,omitempty"`
	// ID of fixed status.
	Fixed int32 `protobuf:"varint,9,opt,name=fixed,proto3" json:"fixed,omitempty"`
	// ID of confirmed status.
	Confirmed int32 `protobuf:"varint,10,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// ID of verified false positive status.
	VerifiedFalsePositive int32 `protobuf:"varint,11,opt,name=verified_false_positive,json=verifiedFalsePositive,proto3" json:"verified_false_positive,omitempty"`
	// ID of intentional status.
	Intentional int32 `protobuf:"varint,12,opt,name=intentional,proto3" json:"intentional,omitempty"`
	// ID of verified intentional status.
	VerifiedIntentional int32 `protobuf:"varint,13,opt,name=verified_intentional,json=verifiedIntentional,proto3" json:"verified_intentional,omitempty"`
	// ID of obsolete status.
	Obsolete int32 `protobuf:"varint,14,opt,name=obsolete,proto3" json:"obsolete,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{2}
}

func (x *Status) GetNew() int32 {
	if x != nil {
		return x.New
	}
	return 0
}

func (x *Status) GetRunning() int32 {
	if x != nil {
		return x.Running
	}
	return 0
}

func (x *Status) GetResolved() int32 {
	if x != nil {
		return x.Resolved
	}
	return 0
}

func (x *Status) GetReplied() int32 {
	if x != nil {
		return x.Replied
	}
	return 0
}

func (x *Status) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *Status) GetFalsePositive() int32 {
	if x != nil {
		return x.FalsePositive
	}
	return 0
}

func (x *Status) GetDuplicate() int32 {
	if x != nil {
		return x.Duplicate
	}
	return 0
}

func (x *Status) GetFixed() int32 {
	if x != nil {
		return x.Fixed
	}
	return 0
}

func (x *Status) GetConfirmed() int32 {
	if x != nil {
		return x.Confirmed
	}
	return 0
}

func (x *Status) GetVerifiedFalsePositive() int32 {
	if x != nil {
		return x.VerifiedFalsePositive
	}
	return 0
}

func (x *Status) GetIntentional() int32 {
	if x != nil {
		return x.Intentional
	}
	return 0
}

func (x *Status) GetVerifiedIntentional() int32 {
	if x != nil {
		return x.VerifiedIntentional
	}
	return 0
}

func (x *Status) GetObsolete() int32 {
	if x != nil {
		return x.Obsolete
	}
	return 0
}

// Redmine tracker ID
type Tracker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of error tracker.
	Error int32 `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	// ID of scan tracker.
	Scan int32 `protobuf:"varint,2,opt,name=scan,proto3" json:"scan,omitempty"`
	// ID of mandatory tracker.
	Mandatory int32 `protobuf:"varint,3,opt,name=mandatory,proto3" json:"mandatory,omitempty"`
	// ID of required tracker.
	Required int32 `protobuf:"varint,4,opt,name=required,proto3" json:"required,omitempty"`
	// ID of advisory tracker.
	Advisory int32 `protobuf:"varint,5,opt,name=advisory,proto3" json:"advisory,omitempty"`
}

func (x *Tracker) Reset() {
	*x = Tracker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tracker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tracker) ProtoMessage() {}

func (x *Tracker) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tracker.ProtoReflect.Descriptor instead.
func (*Tracker) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{3}
}

func (x *Tracker) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *Tracker) GetScan() int32 {
	if x != nil {
		return x.Scan
	}
	return 0
}

func (x *Tracker) GetMandatory() int32 {
	if x != nil {
		return x.Mandatory
	}
	return 0
}

func (x *Tracker) GetRequired() int32 {
	if x != nil {
		return x.Required
	}
	return 0
}

func (x *Tracker) GetAdvisory() int32 {
	if x != nil {
		return x.Advisory
	}
	return 0
}

// Redmine custom field
type CustomField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Custom field ID of git ref name.
	RefId int32 `protobuf:"varint,1,opt,name=ref_id,json=refId,proto3" json:"ref_id,omitempty"`
	// Custom field ID of commit hash.
	CommitHashId int32 `protobuf:"varint,2,opt,name=commit_hash_id,json=commitHashId,proto3" json:"commit_hash_id,omitempty"`
	// Custom field ID of path.
	PathId int32 `protobuf:"varint,3,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	// Custom field ID of error message.
	ErrorMessageId int32 `protobuf:"varint,4,opt,name=error_message_id,json=errorMessageId,proto3" json:"error_message_id,omitempty"`
	// Custom field ID of line number.
	LineNumberId int32 `protobuf:"varint,5,opt,name=line_number_id,json=lineNumberId,proto3" json:"line_number_id,omitempty"`
	// Custom field ID of git clone URL.
	GitCloneUrlId int32 `protobuf:"varint,6,opt,name=git_clone_url_id,json=gitCloneUrlId,proto3" json:"git_clone_url_id,omitempty"`
	// Custom field ID of is_initialized.
	IsInitializedId int32 `protobuf:"varint,7,opt,name=is_initialized_id,json=isInitializedId,proto3" json:"is_initialized_id,omitempty"`
	// Custom field ID of url to the related file.
	LocationId int32 `protobuf:"varint,8,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	// Custom field ID of policy checked.
	PolicyCheckedId int32 `protobuf:"varint,9,opt,name=policy_checked_id,json=policyCheckedId,proto3" json:"policy_checked_id,omitempty"`
	// Custom field ID of scan task.
	ScanTaskId int32 `protobuf:"varint,10,opt,name=scan_task_id,json=scanTaskId,proto3" json:"scan_task_id,omitempty"`
	// Custom field ID of error locations.
	LocationsId int32 `protobuf:"varint,11,opt,name=locations_id,json=locationsId,proto3" json:"locations_id,omitempty"`
	// Custom field ID of deviation records.
	DeviationRecordsId int32 `protobuf:"varint,12,opt,name=deviation_records_id,json=deviationRecordsId,proto3" json:"deviation_records_id,omitempty"`
	// Custom field ID of compliant records.
	CompliantRecordsId int32 `protobuf:"varint,13,opt,name=compliant_records_id,json=compliantRecordsId,proto3" json:"compliant_records_id,omitempty"`
	// Custom field ID of doc link to related issue
	RuleDocLink int32 `protobuf:"varint,14,opt,name=rule_doc_link,json=ruleDocLink,proto3" json:"rule_doc_link,omitempty"`
	// Custom field ID of effective lines.
	EffectiveLinesId int32 `protobuf:"varint,15,opt,name=effective_lines_id,json=effectiveLinesId,proto3" json:"effective_lines_id,omitempty"`
	// Custom field ID of check rules.
	CheckRulesId int32 `protobuf:"varint,16,opt,name=check_rules_id,json=checkRulesId,proto3" json:"check_rules_id,omitempty"`
	// Custom field ID of init submodule.
	InitSubmoduleId int32 `protobuf:"varint,17,opt,name=init_submodule_id,json=initSubmoduleId,proto3" json:"init_submodule_id,omitempty"`
	// Custom field ID of check rules.
	ProjectCheckRulesId int32 `protobuf:"varint,18,opt,name=project_check_rules_id,json=projectCheckRulesId,proto3" json:"project_check_rules_id,omitempty"`
	// Custom field ID of archive hash.
	ArchiveHashId int32 `protobuf:"varint,19,opt,name=archive_hash_id,json=archiveHashId,proto3" json:"archive_hash_id,omitempty"`
	// Custom field ID of project access token.
	ProjectAccessTokenId int32 `protobuf:"varint,20,opt,name=project_access_token_id,json=projectAccessTokenId,proto3" json:"project_access_token_id,omitempty"`
	// Custom field ID of analyze source directory.
	SrcDirId int32 `protobuf:"varint,21,opt,name=src_dir_id,json=srcDirId,proto3" json:"src_dir_id,omitempty"`
	// Custom field ID of ignore directory patterns.
	IgnorePatternsId int32 `protobuf:"varint,22,opt,name=ignore_patterns_id,json=ignorePatternsId,proto3" json:"ignore_patterns_id,omitempty"`
	// Custom field ID of working branch.
	WorkingBranchId int32 `protobuf:"varint,23,opt,name=working_branch_id,json=workingBranchId,proto3" json:"working_branch_id,omitempty"`
	// Custom field ID of severity.
	SeverityId int32 `protobuf:"varint,24,opt,name=severity_id,json=severityId,proto3" json:"severity_id,omitempty"`
	// Custom field ID of project type.
	ProjectTypeId int32 `protobuf:"varint,25,opt,name=project_type_id,json=projectTypeId,proto3" json:"project_type_id,omitempty"`
	// Custom field ID of qmake pro path
	QtProPathId int32 `protobuf:"varint,26,opt,name=qt_pro_path_id,json=qtProPathId,proto3" json:"qt_pro_path_id,omitempty"`
	// Custom field ID of script contents
	ScriptContentsId int32 `protobuf:"varint,27,opt,name=script_contents_id,json=scriptContentsId,proto3" json:"script_contents_id,omitempty"`
	// Custom field ID of error code
	ErrorCodeId int32 `protobuf:"varint,28,opt,name=error_code_id,json=errorCodeId,proto3" json:"error_code_id,omitempty"`
}

func (x *CustomField) Reset() {
	*x = CustomField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomField) ProtoMessage() {}

func (x *CustomField) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomField.ProtoReflect.Descriptor instead.
func (*CustomField) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{4}
}

func (x *CustomField) GetRefId() int32 {
	if x != nil {
		return x.RefId
	}
	return 0
}

func (x *CustomField) GetCommitHashId() int32 {
	if x != nil {
		return x.CommitHashId
	}
	return 0
}

func (x *CustomField) GetPathId() int32 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *CustomField) GetErrorMessageId() int32 {
	if x != nil {
		return x.ErrorMessageId
	}
	return 0
}

func (x *CustomField) GetLineNumberId() int32 {
	if x != nil {
		return x.LineNumberId
	}
	return 0
}

func (x *CustomField) GetGitCloneUrlId() int32 {
	if x != nil {
		return x.GitCloneUrlId
	}
	return 0
}

func (x *CustomField) GetIsInitializedId() int32 {
	if x != nil {
		return x.IsInitializedId
	}
	return 0
}

func (x *CustomField) GetLocationId() int32 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *CustomField) GetPolicyCheckedId() int32 {
	if x != nil {
		return x.PolicyCheckedId
	}
	return 0
}

func (x *CustomField) GetScanTaskId() int32 {
	if x != nil {
		return x.ScanTaskId
	}
	return 0
}

func (x *CustomField) GetLocationsId() int32 {
	if x != nil {
		return x.LocationsId
	}
	return 0
}

func (x *CustomField) GetDeviationRecordsId() int32 {
	if x != nil {
		return x.DeviationRecordsId
	}
	return 0
}

func (x *CustomField) GetCompliantRecordsId() int32 {
	if x != nil {
		return x.CompliantRecordsId
	}
	return 0
}

func (x *CustomField) GetRuleDocLink() int32 {
	if x != nil {
		return x.RuleDocLink
	}
	return 0
}

func (x *CustomField) GetEffectiveLinesId() int32 {
	if x != nil {
		return x.EffectiveLinesId
	}
	return 0
}

func (x *CustomField) GetCheckRulesId() int32 {
	if x != nil {
		return x.CheckRulesId
	}
	return 0
}

func (x *CustomField) GetInitSubmoduleId() int32 {
	if x != nil {
		return x.InitSubmoduleId
	}
	return 0
}

func (x *CustomField) GetProjectCheckRulesId() int32 {
	if x != nil {
		return x.ProjectCheckRulesId
	}
	return 0
}

func (x *CustomField) GetArchiveHashId() int32 {
	if x != nil {
		return x.ArchiveHashId
	}
	return 0
}

func (x *CustomField) GetProjectAccessTokenId() int32 {
	if x != nil {
		return x.ProjectAccessTokenId
	}
	return 0
}

func (x *CustomField) GetSrcDirId() int32 {
	if x != nil {
		return x.SrcDirId
	}
	return 0
}

func (x *CustomField) GetIgnorePatternsId() int32 {
	if x != nil {
		return x.IgnorePatternsId
	}
	return 0
}

func (x *CustomField) GetWorkingBranchId() int32 {
	if x != nil {
		return x.WorkingBranchId
	}
	return 0
}

func (x *CustomField) GetSeverityId() int32 {
	if x != nil {
		return x.SeverityId
	}
	return 0
}

func (x *CustomField) GetProjectTypeId() int32 {
	if x != nil {
		return x.ProjectTypeId
	}
	return 0
}

func (x *CustomField) GetQtProPathId() int32 {
	if x != nil {
		return x.QtProPathId
	}
	return 0
}

func (x *CustomField) GetScriptContentsId() int32 {
	if x != nil {
		return x.ScriptContentsId
	}
	return 0
}

func (x *CustomField) GetErrorCodeId() int32 {
	if x != nil {
		return x.ErrorCodeId
	}
	return 0
}

// Redmine priority ID
type Priority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Normal priority ID
	Normal int32 `protobuf:"varint,1,opt,name=normal,proto3" json:"normal,omitempty"`
}

func (x *Priority) Reset() {
	*x = Priority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Priority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Priority) ProtoMessage() {}

func (x *Priority) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Priority.ProtoReflect.Descriptor instead.
func (*Priority) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{5}
}

func (x *Priority) GetNormal() int32 {
	if x != nil {
		return x.Normal
	}
	return 0
}

type RedmineRoleIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerRoleId int32 `protobuf:"varint,1,opt,name=manager_role_id,json=managerRoleId,proto3" json:"manager_role_id,omitempty"`
}

func (x *RedmineRoleIDs) Reset() {
	*x = RedmineRoleIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedmineRoleIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedmineRoleIDs) ProtoMessage() {}

func (x *RedmineRoleIDs) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedmineRoleIDs.ProtoReflect.Descriptor instead.
func (*RedmineRoleIDs) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{6}
}

func (x *RedmineRoleIDs) GetManagerRoleId() int32 {
	if x != nil {
		return x.ManagerRoleId
	}
	return 0
}

var File_config_config_proto protoreflect.FileDescriptor

var file_config_config_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xca, 0x06,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2f, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79,
	0x12, 0x3a, 0x0a, 0x19, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x69, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x69, 0x74, 0x42, 0x69, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x66, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x66, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f,
	0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6f, 0x64, 0x6d, 0x61,
	0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x6f, 0x64, 0x6d, 0x61, 0x6e, 0x42, 0x69, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x3b, 0x0a, 0x07, 0x72, 0x65, 0x64, 0x6d, 0x69, 0x6e, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x64, 0x6d, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x07, 0x72, 0x65, 0x64, 0x6d, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0c,
	0x64, 0x6f, 0x63, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x53, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2f,
	0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x67, 0x65,
	0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x6f, 0x64, 0x6d, 0x61, 0x6e, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x75, 0x72, 0x6c, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6f, 0x64, 0x6d,
	0x61, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x72, 0x65, 0x64, 0x6d, 0x69, 0x6e, 0x65, 0x22, 0xb4, 0x03, 0x0a, 0x14, 0x52,
	0x65, 0x64, 0x6d, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x41,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x6d, 0x69, 0x6e, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x6d,
	0x69, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x73, 0x74, 0x41, 0x70, 0x69, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x2c, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3e,
	0x0a, 0x1c, 0x75, 0x6e, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x73, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x75, 0x6e, 0x69, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x31,
	0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x64, 0x6d, 0x69, 0x6e,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x73, 0x22, 0xa2, 0x03, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x6e, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x36, 0x0a,
	0x17, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x14, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62,
	0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x62,
	0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x63, 0x61, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x63, 0x61, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x79, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0xee, 0x08, 0x0a, 0x0b, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x10, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x67, 0x69, 0x74, 0x43, 0x6c, 0x6f,
	0x6e, 0x65, 0x55, 0x72, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x44, 0x6f, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2c, 0x0a,
	0x12, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x6e,
	0x69, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a,
	0x16, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x72, 0x63, 0x44, 0x69, 0x72, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0e, 0x71, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x71, 0x74, 0x50, 0x72,
	0x6f, 0x50, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x08, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x22, 0x38, 0x0a,
	0x0e, 0x52, 0x65, 0x64, 0x6d, 0x69, 0x6e, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x42, 0x11, 0x5a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_config_config_proto_rawDescOnce sync.Once
	file_config_config_proto_rawDescData = file_config_config_proto_rawDesc
)

func file_config_config_proto_rawDescGZIP() []byte {
	file_config_config_proto_rawDescOnce.Do(func() {
		file_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_config_proto_rawDescData)
	})
	return file_config_config_proto_rawDescData
}

var file_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_config_config_proto_goTypes = []interface{}{
	(*Configuration)(nil),        // 0: config.Configuration
	(*RedmineConfiguration)(nil), // 1: config.RedmineConfiguration
	(*Status)(nil),               // 2: config.Status
	(*Tracker)(nil),              // 3: config.Tracker
	(*CustomField)(nil),          // 4: config.CustomField
	(*Priority)(nil),             // 5: config.Priority
	(*RedmineRoleIDs)(nil),       // 6: config.RedmineRoleIDs
}
var file_config_config_proto_depIdxs = []int32{
	1, // 0: config.Configuration.redmine:type_name -> config.RedmineConfiguration
	2, // 1: config.RedmineConfiguration.status:type_name -> config.Status
	3, // 2: config.RedmineConfiguration.tracker:type_name -> config.Tracker
	4, // 3: config.RedmineConfiguration.custom_field:type_name -> config.CustomField
	5, // 4: config.RedmineConfiguration.priority:type_name -> config.Priority
	6, // 5: config.RedmineConfiguration.role_ids:type_name -> config.RedmineRoleIDs
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_config_config_proto_init() }
func file_config_config_proto_init() {
	if File_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedmineConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tracker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Priority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedmineRoleIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_config_config_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_config_proto_goTypes,
		DependencyIndexes: file_config_config_proto_depIdxs,
		MessageInfos:      file_config_config_proto_msgTypes,
	}.Build()
	File_config_config_proto = out.File
	file_config_config_proto_rawDesc = nil
	file_config_config_proto_goTypes = nil
	file_config_config_proto_depIdxs = nil
}
