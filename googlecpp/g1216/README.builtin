About Clang Builtins

---------------------------------

This is an explanation about
third_party/llvm-project/clang/include/clang/Basic/Builtins.def.

There 3 kinds of builtins:

1. Builtin: basic builtins.
2. Lib Builtin: defined in stdc, POSIX libs.
3. Lang Buitin: defined by Microsoft, OpenCL, CUDA, etc.

```c
BUILTIN(__builtin_prefetch, "vvC*.", "nc")
LIBBUILTIN(abs, "ii", "fnc", "stdlib.h", ALL_LANGUAGES)
LIBBUILTIN(printf, "icC*.",       "fp:0:", "stdio.h", ALL_LANGUAGES)
```

E.g., void __builtin_prefetch(const void*) is a Builin, with attributes:
- n: nothrow
- c: const

E.g., int abs(int) is a Lib Builtin, with attributes fnc:
- f: this is a libc/libm function without a '__builtin_' prefix, or with
  'z', a C++ standard library function in namespace std::.
- n: ditto
- c: ditto

E.g., int printf(const char*,...) is a Lib Builtin, with attributes:
- f: ditto
- p:0: this is a printf-like function whose 0th argument is the format string

---------------------------------

In this rule, we disallow the use of `__builtin_prefetch` and `alloca`, but not
the use of `abs` and `printf`. How can we do that?

We can use `clang::Builtin::Info`

```c++
struct Info {
  const char *Name, *Type, *Attributes, *HeaderName;
  LanguageID Langs;
  const char *Features;
};
```

Builtin(1) like `__builtin_prefetch` has no header. This works, see
third_party/llvm-project/clang/include/clang/Basic/Builtins.h
we can use `const char *getHeaderName(unsigned ID)`.

Builtin like `alloca` is active in GNU mode only, and we use LanguageID to check
it. But this is not a public API. Currently, `alloca()` in source code would be
recognized as `__builtin_alloca`, like `__builtin_prefetch`, so this is not a
problem.
