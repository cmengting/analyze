About noreturn attributes.

--------------------------------------------

According to https://clang.llvm.org/docs/AttributeReference.html, there are 3
kinds of noreturn attributes:

a) Function attributes: _Noreturn;
b) Function attributes: noreturn, _Noreturn;
c) Undocumented: noreturn.

In third_party/llvm-project/clang/include/clang/Basic/Attr.td:

a) C11NoReturn;
b) CXX11NoReturn;
c) NoReturn.

In third_party/llvm-project/clang/include/clang/Basic/AttrDocs.td:

a) C11NoReturnDocs;
b) CXX11NoReturnDocs.

```javascript
def C11NoReturn : InheritableAttr {
  let Spellings = [Keyword<"_Noreturn">];
  let Subjects = SubjectList<[Function], ErrorDiag>;
  let SemaHandler = 0;
  let Documentation = [C11NoReturnDocs];
}

def CXX11NoReturn : InheritableAttr {
  let Spellings = [CXX11<"", "noreturn", 200809>,
                   C2x<"", "noreturn", 202202>,
                   C2x<"", "_Noreturn", 202202>];
  let Subjects = SubjectList<[Function], ErrorDiag>;
  let Documentation = [CXX11NoReturnDocs];
}

def NoReturn : InheritableAttr {
  let Spellings = [GCC<"noreturn">, Declspec<"noreturn">];
  // FIXME: Does GCC allow this on the function instead?
  let Documentation = [Undocumented];
}
```

Here are some code examples

```c++
// (a) In C language, as a function specifier (keyword)
// https://en.cppreference.com/w/c/language/_Noreturn
_Noreturn void exit_now(int i) { if (i>0) exit(i); }

// (b) In C++, since C++11
// https://en.cppreference.com/w/cpp/language/attributes/noreturn
[[noreturn]] void f() { throw "error"; }
void q [[noreturn]] (int i) { throw "error"; }
// (b) In C, since C2x
//third_party/llvm-project/clang/test/Sema/c2x-noreturn.c
[[_Noreturn]] void func10(void);

// (c) Not in standard, but as language extension
// third_party/llvm-project/clang/test/SemaCXX/cxx11-gnu-attrs.cpp
[[gnu::noreturn]] int noreturn_fn_4();
// third_party/llvm-project/clang/test/SemaCXX/attr-noreturn.cpp
void f0() __attribute__((__noreturn__));
```

Also may be helpful: https://clang.llvm.org/docs/LanguageExtensions.html

--------------------------------------------

As for this rule, we only cares about (c).
How do we distinguish (c) from (a)(b)?

At third_party/llvm-project/clang/include/clang/AST/Type.h:3885,
there is a function with comments

```c++
/// Determine whether this function type includes the GNU noreturn
/// attribute. The C++11 [[noreturn]] attribute does not affect the function
/// type.
bool getNoReturnAttr() const { return getExtInfo().getNoReturn(); }
```

So we use `getNoReturnAttr()` to check whether the code uses GNU noreturn.
